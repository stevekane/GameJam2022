//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Tests/InputSystem/InputMappings.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMappings : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMappings()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMappings"",
    ""maps"": [
        {
            ""name"": ""Grounded"",
            ""id"": ""37dad415-d931-4693-9d93-aae0d0282f02"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""560f111a-57da-4d64-859c-ef0ce270baf9"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""50a38003-cb1b-4205-981d-4b0e17d8ccbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fly"",
                    ""type"": ""Button"",
                    ""id"": ""1f8e54b1-ac0c-4f8b-a508-0418442208eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1dd8bfc-bc3c-416e-a50f-936536c4cb5e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d1d212b-bab2-4254-9c9a-60961bb505b1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52be6997-840a-47a3-b03a-4401261b9e88"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Airborne"",
            ""id"": ""4970ab41-17aa-4a5f-8b8b-868986da16d4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ecd61b08-4ef4-433f-baab-f34d01fd0310"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0b6a9fa-4fbb-4431-9bc4-6ffb74e99438"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Grounded"",
            ""bindingGroup"": ""Grounded"",
            ""devices"": []
        }
    ]
}");
        // Grounded
        m_Grounded = asset.FindActionMap("Grounded", throwIfNotFound: true);
        m_Grounded_Move = m_Grounded.FindAction("Move", throwIfNotFound: true);
        m_Grounded_Jump = m_Grounded.FindAction("Jump", throwIfNotFound: true);
        m_Grounded_Fly = m_Grounded.FindAction("Fly", throwIfNotFound: true);
        // Airborne
        m_Airborne = asset.FindActionMap("Airborne", throwIfNotFound: true);
        m_Airborne_Move = m_Airborne.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grounded
    private readonly InputActionMap m_Grounded;
    private IGroundedActions m_GroundedActionsCallbackInterface;
    private readonly InputAction m_Grounded_Move;
    private readonly InputAction m_Grounded_Jump;
    private readonly InputAction m_Grounded_Fly;
    public struct GroundedActions
    {
        private @InputMappings m_Wrapper;
        public GroundedActions(@InputMappings wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Grounded_Move;
        public InputAction @Jump => m_Wrapper.m_Grounded_Jump;
        public InputAction @Fly => m_Wrapper.m_Grounded_Fly;
        public InputActionMap Get() { return m_Wrapper.m_Grounded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundedActions set) { return set.Get(); }
        public void SetCallbacks(IGroundedActions instance)
        {
            if (m_Wrapper.m_GroundedActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Fly.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnFly;
                @Fly.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnFly;
                @Fly.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnFly;
            }
            m_Wrapper.m_GroundedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Fly.started += instance.OnFly;
                @Fly.performed += instance.OnFly;
                @Fly.canceled += instance.OnFly;
            }
        }
    }
    public GroundedActions @Grounded => new GroundedActions(this);

    // Airborne
    private readonly InputActionMap m_Airborne;
    private IAirborneActions m_AirborneActionsCallbackInterface;
    private readonly InputAction m_Airborne_Move;
    public struct AirborneActions
    {
        private @InputMappings m_Wrapper;
        public AirborneActions(@InputMappings wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Airborne_Move;
        public InputActionMap Get() { return m_Wrapper.m_Airborne; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AirborneActions set) { return set.Get(); }
        public void SetCallbacks(IAirborneActions instance)
        {
            if (m_Wrapper.m_AirborneActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_AirborneActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_AirborneActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_AirborneActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_AirborneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public AirborneActions @Airborne => new AirborneActions(this);
    private int m_GroundedSchemeIndex = -1;
    public InputControlScheme GroundedScheme
    {
        get
        {
            if (m_GroundedSchemeIndex == -1) m_GroundedSchemeIndex = asset.FindControlSchemeIndex("Grounded");
            return asset.controlSchemes[m_GroundedSchemeIndex];
        }
    }
    public interface IGroundedActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFly(InputAction.CallbackContext context);
    }
    public interface IAirborneActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
