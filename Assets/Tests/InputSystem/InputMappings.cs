//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Tests/InputSystem/InputMappings.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMappings : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMappings()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMappings"",
    ""maps"": [
        {
            ""name"": ""Grounded"",
            ""id"": ""37dad415-d931-4693-9d93-aae0d0282f02"",
            ""actions"": [
                {
                    ""name"": ""Fly"",
                    ""type"": ""Button"",
                    ""id"": ""1f8e54b1-ac0c-4f8b-a508-0418442208eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52be6997-840a-47a3-b03a-4401261b9e88"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Airborne"",
            ""id"": ""4970ab41-17aa-4a5f-8b8b-868986da16d4"",
            ""actions"": [
                {
                    ""name"": ""Land"",
                    ""type"": ""Button"",
                    ""id"": ""ecd61b08-4ef4-433f-baab-f34d01fd0310"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""4856aa0f-2a07-4d5f-843a-29722d2ac4b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0b6a9fa-4fbb-4431-9bc4-6ffb74e99438"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Land"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c92ee47-d928-4f2a-94e6-64cf497e57b1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TripleShot"",
            ""id"": ""9a5dc67d-0e53-4ffb-83fe-3996cf8b18f4"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""7c68c2cc-7bc9-465b-9e82-c59b54546095"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""669dc8d8-e90a-4c8a-854f-43097119d5b6"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Grounded"",
            ""bindingGroup"": ""Grounded"",
            ""devices"": []
        }
    ]
}");
        // Grounded
        m_Grounded = asset.FindActionMap("Grounded", throwIfNotFound: true);
        m_Grounded_Fly = m_Grounded.FindAction("Fly", throwIfNotFound: true);
        // Airborne
        m_Airborne = asset.FindActionMap("Airborne", throwIfNotFound: true);
        m_Airborne_Land = m_Airborne.FindAction("Land", throwIfNotFound: true);
        m_Airborne_Fire = m_Airborne.FindAction("Fire", throwIfNotFound: true);
        // TripleShot
        m_TripleShot = asset.FindActionMap("TripleShot", throwIfNotFound: true);
        m_TripleShot_Fire = m_TripleShot.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grounded
    private readonly InputActionMap m_Grounded;
    private IGroundedActions m_GroundedActionsCallbackInterface;
    private readonly InputAction m_Grounded_Fly;
    public struct GroundedActions
    {
        private @InputMappings m_Wrapper;
        public GroundedActions(@InputMappings wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fly => m_Wrapper.m_Grounded_Fly;
        public InputActionMap Get() { return m_Wrapper.m_Grounded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundedActions set) { return set.Get(); }
        public void SetCallbacks(IGroundedActions instance)
        {
            if (m_Wrapper.m_GroundedActionsCallbackInterface != null)
            {
                @Fly.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnFly;
                @Fly.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnFly;
                @Fly.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnFly;
            }
            m_Wrapper.m_GroundedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fly.started += instance.OnFly;
                @Fly.performed += instance.OnFly;
                @Fly.canceled += instance.OnFly;
            }
        }
    }
    public GroundedActions @Grounded => new GroundedActions(this);

    // Airborne
    private readonly InputActionMap m_Airborne;
    private IAirborneActions m_AirborneActionsCallbackInterface;
    private readonly InputAction m_Airborne_Land;
    private readonly InputAction m_Airborne_Fire;
    public struct AirborneActions
    {
        private @InputMappings m_Wrapper;
        public AirborneActions(@InputMappings wrapper) { m_Wrapper = wrapper; }
        public InputAction @Land => m_Wrapper.m_Airborne_Land;
        public InputAction @Fire => m_Wrapper.m_Airborne_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Airborne; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AirborneActions set) { return set.Get(); }
        public void SetCallbacks(IAirborneActions instance)
        {
            if (m_Wrapper.m_AirborneActionsCallbackInterface != null)
            {
                @Land.started -= m_Wrapper.m_AirborneActionsCallbackInterface.OnLand;
                @Land.performed -= m_Wrapper.m_AirborneActionsCallbackInterface.OnLand;
                @Land.canceled -= m_Wrapper.m_AirborneActionsCallbackInterface.OnLand;
                @Fire.started -= m_Wrapper.m_AirborneActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_AirborneActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_AirborneActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_AirborneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Land.started += instance.OnLand;
                @Land.performed += instance.OnLand;
                @Land.canceled += instance.OnLand;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public AirborneActions @Airborne => new AirborneActions(this);

    // TripleShot
    private readonly InputActionMap m_TripleShot;
    private ITripleShotActions m_TripleShotActionsCallbackInterface;
    private readonly InputAction m_TripleShot_Fire;
    public struct TripleShotActions
    {
        private @InputMappings m_Wrapper;
        public TripleShotActions(@InputMappings wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_TripleShot_Fire;
        public InputActionMap Get() { return m_Wrapper.m_TripleShot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TripleShotActions set) { return set.Get(); }
        public void SetCallbacks(ITripleShotActions instance)
        {
            if (m_Wrapper.m_TripleShotActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_TripleShotActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_TripleShotActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_TripleShotActionsCallbackInterface.OnFire;
            }
            m_Wrapper.m_TripleShotActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }
        }
    }
    public TripleShotActions @TripleShot => new TripleShotActions(this);
    private int m_GroundedSchemeIndex = -1;
    public InputControlScheme GroundedScheme
    {
        get
        {
            if (m_GroundedSchemeIndex == -1) m_GroundedSchemeIndex = asset.FindControlSchemeIndex("Grounded");
            return asset.controlSchemes[m_GroundedSchemeIndex];
        }
    }
    public interface IGroundedActions
    {
        void OnFly(InputAction.CallbackContext context);
    }
    public interface IAirborneActions
    {
        void OnLand(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
    public interface ITripleShotActions
    {
        void OnFire(InputAction.CallbackContext context);
    }
}
