//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Tests/Sequencing Exploration/Input/CharacterInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterInputActions"",
    ""maps"": [
        {
            ""name"": ""Grounded"",
            ""id"": ""71db6a64-4338-4593-984b-cd5767dc40d7"",
            ""actions"": [
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""760e47ef-933d-43c6-8ae2-8950c378d12f"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3c4bc4ea-7899-47ef-985f-69c5fe07bd41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""22628e17-e40b-4b5a-a226-23f03187bd5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""ee29f61f-3434-4706-8dcd-d94ba80c4d37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""96719d87-2650-4da5-b950-c2862f7618ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""5105967e-84d8-4814-8d89-4bdeeae01ebc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cccd0a8b-3d0e-4a25-87d8-82897ecf7f8b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f43c22c0-a623-4d46-932e-f41fc156307b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""241d8fcd-2068-4359-98a7-5fdf9037e254"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5297af71-4044-48cf-a5d3-d628e7483f55"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb42c53d-06b1-4cc0-9ac7-5920e2779551"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98490859-a609-4210-9115-bf59b48a2dbd"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Air"",
            ""id"": ""3f172596-7f55-40e8-98db-86493214a1b2"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""8baf58d4-7ed4-49bf-8a03-a0baafa1668c"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c057195f-d996-4ee3-9535-af1a637c64ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d11cb77a-78d6-4203-a79d-5cbc27817c09"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0392beae-2074-44b6-935f-e316a01f10e4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Grounded
        m_Grounded = asset.FindActionMap("Grounded", throwIfNotFound: true);
        m_Grounded_Run = m_Grounded.FindAction("Run", throwIfNotFound: true);
        m_Grounded_Jump = m_Grounded.FindAction("Jump", throwIfNotFound: true);
        m_Grounded_Sprint = m_Grounded.FindAction("Sprint", throwIfNotFound: true);
        m_Grounded_Slide = m_Grounded.FindAction("Slide", throwIfNotFound: true);
        m_Grounded_LightAttack = m_Grounded.FindAction("LightAttack", throwIfNotFound: true);
        m_Grounded_HeavyAttack = m_Grounded.FindAction("HeavyAttack", throwIfNotFound: true);
        // Air
        m_Air = asset.FindActionMap("Air", throwIfNotFound: true);
        m_Air_Steer = m_Air.FindAction("Steer", throwIfNotFound: true);
        m_Air_Jump = m_Air.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grounded
    private readonly InputActionMap m_Grounded;
    private IGroundedActions m_GroundedActionsCallbackInterface;
    private readonly InputAction m_Grounded_Run;
    private readonly InputAction m_Grounded_Jump;
    private readonly InputAction m_Grounded_Sprint;
    private readonly InputAction m_Grounded_Slide;
    private readonly InputAction m_Grounded_LightAttack;
    private readonly InputAction m_Grounded_HeavyAttack;
    public struct GroundedActions
    {
        private @CharacterInputActions m_Wrapper;
        public GroundedActions(@CharacterInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Run => m_Wrapper.m_Grounded_Run;
        public InputAction @Jump => m_Wrapper.m_Grounded_Jump;
        public InputAction @Sprint => m_Wrapper.m_Grounded_Sprint;
        public InputAction @Slide => m_Wrapper.m_Grounded_Slide;
        public InputAction @LightAttack => m_Wrapper.m_Grounded_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_Grounded_HeavyAttack;
        public InputActionMap Get() { return m_Wrapper.m_Grounded; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GroundedActions set) { return set.Get(); }
        public void SetCallbacks(IGroundedActions instance)
        {
            if (m_Wrapper.m_GroundedActionsCallbackInterface != null)
            {
                @Run.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnJump;
                @Sprint.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnSprint;
                @Slide.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnSlide;
                @Slide.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnSlide;
                @Slide.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnSlide;
                @LightAttack.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnLightAttack;
                @LightAttack.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnLightAttack;
                @LightAttack.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnLightAttack;
                @HeavyAttack.started -= m_Wrapper.m_GroundedActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.performed -= m_Wrapper.m_GroundedActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.canceled -= m_Wrapper.m_GroundedActionsCallbackInterface.OnHeavyAttack;
            }
            m_Wrapper.m_GroundedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Slide.started += instance.OnSlide;
                @Slide.performed += instance.OnSlide;
                @Slide.canceled += instance.OnSlide;
                @LightAttack.started += instance.OnLightAttack;
                @LightAttack.performed += instance.OnLightAttack;
                @LightAttack.canceled += instance.OnLightAttack;
                @HeavyAttack.started += instance.OnHeavyAttack;
                @HeavyAttack.performed += instance.OnHeavyAttack;
                @HeavyAttack.canceled += instance.OnHeavyAttack;
            }
        }
    }
    public GroundedActions @Grounded => new GroundedActions(this);

    // Air
    private readonly InputActionMap m_Air;
    private IAirActions m_AirActionsCallbackInterface;
    private readonly InputAction m_Air_Steer;
    private readonly InputAction m_Air_Jump;
    public struct AirActions
    {
        private @CharacterInputActions m_Wrapper;
        public AirActions(@CharacterInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_Air_Steer;
        public InputAction @Jump => m_Wrapper.m_Air_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Air; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AirActions set) { return set.Get(); }
        public void SetCallbacks(IAirActions instance)
        {
            if (m_Wrapper.m_AirActionsCallbackInterface != null)
            {
                @Steer.started -= m_Wrapper.m_AirActionsCallbackInterface.OnSteer;
                @Steer.performed -= m_Wrapper.m_AirActionsCallbackInterface.OnSteer;
                @Steer.canceled -= m_Wrapper.m_AirActionsCallbackInterface.OnSteer;
                @Jump.started -= m_Wrapper.m_AirActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_AirActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_AirActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_AirActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Steer.started += instance.OnSteer;
                @Steer.performed += instance.OnSteer;
                @Steer.canceled += instance.OnSteer;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public AirActions @Air => new AirActions(this);
    public interface IGroundedActions
    {
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
    }
    public interface IAirActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
